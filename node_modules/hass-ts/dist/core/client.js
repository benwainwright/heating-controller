"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const constants_1 = require("./constants");
const home_assistant_api_1 = require("./home-assistant-api");
const _utils_1 = require("../utils");
const get_config_1 = require("./get-config");
class Client {
    constructor(hassConfig, logger) {
        this.hassConfig = hassConfig;
        this.logger = logger;
        this.states = new Map();
        this.timers = [];
        this.stateLoadCallbacks = new Map();
        this.stateChangedCallbacks = new Map();
        this.hassApi = new home_assistant_api_1.HomeAssistantApi(this.hassConfig);
        const loadStateTimers = setInterval(async () => {
            await this.loadStates();
        }, constants_1.FIVE_MINUTES);
        this.timers.push(loadStateTimers);
    }
    /**
     * Create a new Hass client instance.
     */
    static async start(logger) {
        const config = (0, get_config_1.getConfig)();
        const client = new Client(config, logger);
        await client.init();
        return client;
    }
    onStateLoaded(entityId, callback) {
        const storedCallbacks = this.stateLoadCallbacks.get(entityId);
        this.stateLoadCallbacks.set(entityId, [
            ...(storedCallbacks ?? []),
            callback,
        ]);
    }
    stateChangedListener(event) {
        const callbacks = this.stateChangedCallbacks.get(event.data.entity_id);
        callbacks?.forEach((callback) => callback(event.data.old_state, event.data.new_state));
    }
    onStateChanged(entityId, callback) {
        const storedCallbacks = this.stateLoadCallbacks.get(entityId);
        this.stateChangedCallbacks.set(entityId, [
            ...(storedCallbacks ?? []),
            callback,
        ]);
    }
    async callService(domain, service, fields) {
        await this.hassApi.get.callService(domain, service, fields);
    }
    removeStateChangedCallback(entityId, callback) {
        const storedCallbacks = this.stateChangedCallbacks.get(entityId);
        if (storedCallbacks) {
            const index = storedCallbacks.findIndex((needle) => needle === callback);
            this.stateChangedCallbacks.set(entityId, (0, _utils_1.removeItemAtIndex)(storedCallbacks, index));
        }
    }
    removeOnStateLoadedCallback(entityId, callback) {
        const storedCallbacks = this.stateLoadCallbacks.get(entityId);
        if (storedCallbacks) {
            const index = storedCallbacks.findIndex((needle) => needle === callback);
            this.stateLoadCallbacks.set(entityId, (0, _utils_1.removeItemAtIndex)(storedCallbacks, index));
        }
    }
    parseState(state) {
        return {
            ...state,
            last_changed: new Date(state.last_changed),
            last_updated: new Date(state.last_updated),
        };
    }
    async loadStates() {
        this.logger.debug(`Loading states`);
        const states = await this.hassApi.get.getStates();
        const stateMap = new Map();
        states
            .map((state) => this.parseState(state))
            .forEach((state) => {
            stateMap.set(state.entity_id, state);
            const callbacks = this.stateLoadCallbacks.get(state.entity_id);
            callbacks?.forEach((callback) => callback(state));
        });
        this.logger.debug(`Finished loading states`);
        this.states = stateMap;
    }
    close() {
        this.hassApi.close();
        this.timers.forEach((timer) => clearInterval(timer));
        this.logger.info(`Hass client closed`);
    }
    async init() {
        await this.hassApi.init();
        this.hassApi.get.on("state_changed", this.stateChangedListener.bind(this));
        await this.loadStates();
        this.logger.info("Hass client initialised");
    }
    cachedStates() {
        return this.states;
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUEyQztBQUMzQyw2REFBd0Q7QUFFeEQscUNBQTJDO0FBQzNDLDZDQUF5QztBQUt6QyxNQUFhLE1BQU07SUF5QmpCLFlBQTRCLFVBQXNCLEVBQVUsTUFBYztRQUE5QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQXZCbEUsV0FBTSxHQUF1QixJQUFJLEdBQUcsRUFBaUIsQ0FBQztRQUN0RCxXQUFNLEdBQW1CLEVBQUUsQ0FBQztRQUU1Qix1QkFBa0IsR0FBcUMsSUFBSSxHQUFHLEVBR25FLENBQUM7UUFFSSwwQkFBcUIsR0FBd0MsSUFBSSxHQUFHLEVBR3pFLENBQUM7UUFhRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUkscUNBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXJELE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM3QyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixDQUFDLEVBQUUsd0JBQVksQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFsQkQ7O09BRUc7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFjO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUEsc0JBQVMsR0FBRSxDQUFDO1FBQzNCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBWU0sYUFBYSxDQUFDLFFBQWdCLEVBQUUsUUFB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