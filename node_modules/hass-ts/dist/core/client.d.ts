import { Logger, State } from "../types";
declare type StateLoadCallback = (state: State) => void;
declare type StateChangedCallback = (oldState: State, newState: State) => void;
export declare class Client {
    private hassConfig;
    private logger;
    private hassApi;
    private states;
    private timers;
    private stateLoadCallbacks;
    private stateChangedCallbacks;
    /**
     * Create a new Hass client instance.
     */
    static start(logger: Logger): Promise<Client>;
    private constructor();
    onStateLoaded(entityId: string, callback: StateLoadCallback): void;
    private stateChangedListener;
    onStateChanged(entityId: string, callback: StateChangedCallback): void;
    callService<F>(domain: string, service: string, fields?: F): Promise<void>;
    removeStateChangedCallback(entityId: string, callback: StateChangedCallback): void;
    removeOnStateLoadedCallback(entityId: string, callback: StateLoadCallback): void;
    private parseState;
    private loadStates;
    close(): void;
    init(): Promise<void>;
    cachedStates(): Map<string, State>;
}
export {};
